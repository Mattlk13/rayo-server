<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context" 
    xmlns:lang="http://www.springframework.org/schema/lang"
    xmlns:p="http://www.springframework.org/schema/p" 
    xmlns:util="http://www.springframework.org/schema/util"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
		http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang-3.0.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd"
    default-autowire="byName">

	<!-- Actor Thread Pool -->
	<bean id="executor" class="java.util.concurrent.Executors" factory-method="newCachedThreadPool" />
	
	<!-- Jetlang Fiber Factory -->
	<bean id="fiberFactory" class="org.jetlang.fibers.PoolFiberFactory">
		<constructor-arg ref="executor" />
	</bean>
	
	<!-- Global Call Registry -->
	<bean id="callRegistry" class="com.tropo.server.DefaultCallRegistry" />

	<!-- Global Mixer Registry -->
	<bean id="mixerRegistry" class="com.tropo.server.DefaultMixerRegistry" />

	<!-- Call Statistics Service -->
	<bean id="callStatistics" class="com.tropo.server.CallStatistics"/>

	<!-- Ozone Statistics Service -->
	<bean id="ozoneStatistics" class="com.tropo.server.OzoneStatistics"/>

	<!-- Call Actor Factory -->
	<bean id="callActorFactory" class="com.tropo.server.DefaultCallActorFactory">
		<property name="fiberFactory" ref="fiberFactory" />
		<property name="verbManager" ref="callVerbManager" />
		<property name="callStatistics" ref="callStatistics" />
		<property name="cdrManager" ref="cdrManager" />
	</bean>	

	<!-- Call Manager: Responsible for maintaining the Call Registry and creating new CallActors -->
	<bean id="callManager" class="com.tropo.server.CallManager">
		<property name="callRegistry" ref="callRegistry" />
		<property name="callActorFactory" ref="callActorFactory" />
	</bean>

	<!-- Mixer Actor Factory -->
	<bean id="mixerActorFactory" class="com.tropo.server.DefaultMixerActorFactory">
		<property name="fiberFactory" ref="fiberFactory" />
		<property name="verbManager" ref="mixerVerbManager" />
	</bean>	
	
	<!-- Conference Manager -->	
	<bean id="conferenceController" class="com.tropo.server.conference.MohoConferenceController"/>

	<!-- Model / Request Validation -->
	<bean id="validator" class="com.tropo.core.validation.Validator"/>

	<!-- Ozone providers -->
	<bean id="ozoneProvider" class="com.tropo.core.xml.providers.OzoneProvider">
		<property name="validator" ref="validator" />
		<property name="namespaces">
			<list>
				<value>urn:xmpp:ozone:1</value>
                <value>urn:xmpp:ozone:ext:1</value>
                <value>urn:xmpp:ozone:ext:complete:1</value>
			</list>
		</property>		
	</bean>
	<bean id="sayProvider" class="com.tropo.core.xml.providers.SayProvider">
		<property name="validator" ref="validator" />
		<property name="namespaces">
			<list>
				<value>urn:xmpp:ozone:say:1</value>
                <value>urn:xmpp:ozone:say:complete:1</value>
			</list>
		</property>		
	</bean>
	<bean id="askProvider" class="com.tropo.core.xml.providers.AskProvider">
		<property name="validator" ref="validator" />
		<property name="namespaces">
			<list>
				<value>urn:xmpp:ozone:ask:1</value>
                <value>urn:xmpp:ozone:ask:complete:1</value>
			</list>
		</property>		
	</bean>
	<bean id="transferProvider" class="com.tropo.core.xml.providers.TransferProvider">
		<property name="validator" ref="validator" />
		<property name="namespaces">
			<list>
				<value>urn:xmpp:ozone:transfer:1</value>
                <value>urn:xmpp:ozone:transfer:complete:1</value>
			</list>
		</property>		
	</bean>
	<bean id="conferenceProvider" class="com.tropo.core.xml.providers.ConferenceProvider">
		<property name="validator" ref="validator" />
		<property name="namespaces">
			<list>
				<value>urn:xmpp:ozone:conference:1</value>
                <value>urn:xmpp:ozone:conference:complete:1</value>
			</list>
		</property>		
	</bean>				
	<bean id="outputProvider" class="com.tropo.core.xml.providers.OutputProvider">
		<property name="validator" ref="validator" />
		<property name="namespaces">
			<list>
				<value>urn:xmpp:ozone:output:1</value>
                <value>urn:xmpp:ozone:output:complete:1</value>
			</list>
		</property>		
	</bean>
	<bean id="inputProvider" class="com.tropo.core.xml.providers.InputProvider">
		<property name="validator" ref="validator" />
		<property name="namespaces">
			<list>
				<value>urn:xmpp:ozone:input:1</value>
                <value>urn:xmpp:ozone:input:complete:1</value>
			</list>
		</property>		
	</bean>
	<bean id="joinProvider" class="com.tropo.core.xml.providers.JoinProvider">
		<property name="validator" ref="validator" />
		<property name="namespaces">
			<list>
				<value>urn:xmpp:ozone:join:1</value>
			</list>
		</property>		
	</bean>
	<bean id="recordProvider" class="com.tropo.core.xml.providers.RecordProvider">
		<property name="validator" ref="validator" />
		<property name="namespaces">
			<list>
				<value>urn:xmpp:ozone:record:1</value>
			</list>
		</property>		
	</bean>
	
	<!-- Create a global XML Provider -->
	<bean id="xmlProviderManager" class="com.tropo.core.xml.DefaultXmlProviderManagerFactoryBean">
		<property name="providers">
			<list>
				<ref bean="ozoneProvider"/>
				<ref bean="sayProvider"/>
				<ref bean="askProvider"/>
				<ref bean="transferProvider"/>
				<ref bean="conferenceProvider"/>
				<ref bean="outputProvider"/>
				<ref bean="inputProvider"/>
				<ref bean="joinProvider"/>
				<ref bean="recordProvider"/>
			</list>
		</property>		
	</bean>

	<!-- Verb Manager: Used to create VerbHandler instances and read/write XML -->
	<bean id="callVerbManager" class="com.tropo.server.verb.DefaultVerbManagerFactoryBean">
		<property name="verbManager">
			<bean class="com.tropo.server.verb.DefaultVerbManager">
				<property name="xmlProviderManager" ref="xmlProviderManager" />
			</bean>
		</property>
		<property name="verbFactoryList">
			<list>
				<!-- Say -->
				<bean class="com.tropo.server.verb.AbstractVerbFactory">
					<property name="xmlProvider" ref="sayProvider" />
					<property name="modelClass" value="com.tropo.core.verb.Say" />
					<lookup-method name="createVerbHandler" bean="sayHandler" />
				</bean>
				<!-- Ask -->
				<bean class="com.tropo.server.verb.AbstractVerbFactory">
					<property name="xmlProvider" ref="askProvider" />
					<property name="modelClass" value="com.tropo.core.verb.Ask" />
					<lookup-method name="createVerbHandler" bean="askHandler" />
				</bean>
				<!-- Transfer -->
				<bean class="com.tropo.server.verb.AbstractVerbFactory">
					<property name="xmlProvider" ref="transferProvider" />
					<property name="modelClass" value="com.tropo.core.verb.Transfer" />
					<lookup-method name="createVerbHandler" bean="transferHandler" />
				</bean>
				<!-- Conference -->
				<bean class="com.tropo.server.verb.AbstractVerbFactory">
					<property name="xmlProvider" ref="conferenceProvider" />
					<property name="modelClass" value="com.tropo.core.verb.Conference" />
					<lookup-method name="createVerbHandler" bean="conferenceHandler" />
				</bean>
				<!-- Output -->
				<bean class="com.tropo.server.verb.AbstractVerbFactory">
					<property name="xmlProvider" ref="outputProvider" />
					<property name="modelClass" value="com.tropo.core.verb.Output" />
					<lookup-method name="createVerbHandler" bean="outputHandler" />
				</bean>
				<!-- Input -->
				<bean class="com.tropo.server.verb.AbstractVerbFactory">
					<property name="xmlProvider" ref="inputProvider" />
					<property name="modelClass" value="com.tropo.core.verb.Input" />
					<lookup-method name="createVerbHandler" bean="inputHandler" />
				</bean>
				<!-- Join -->
				<bean class="com.tropo.server.verb.AbstractVerbFactory">
					<property name="xmlProvider" ref="joinProvider" />
					<property name="modelClass" value="com.tropo.core.verb.Join" />
					<lookup-method name="createVerbHandler" bean="joinHandler" />
				</bean>
				<!-- Record -->
				<bean class="com.tropo.server.verb.AbstractVerbFactory">
					<property name="xmlProvider" ref="recordProvider" />
					<property name="modelClass" value="com.tropo.core.verb.Record" />
					<lookup-method name="createVerbHandler" bean="recordHandler" />
				</bean>				
			</list>
		</property>
	</bean>

	<!-- Mixer verb manager. Handles verbs that can be processed by a mixer -->
	<bean id="mixerVerbManager" class="com.tropo.server.verb.DefaultVerbManagerFactoryBean">
		<property name="verbManager">
			<bean class="com.tropo.server.verb.DefaultVerbManager">
				<property name="xmlProviderManager" ref="xmlProviderManager" />
			</bean>
		</property>
		<property name="verbFactoryList">
			<list>
				<!-- Say -->
				<bean class="com.tropo.server.verb.AbstractVerbFactory">
					<property name="xmlProvider" ref="sayProvider" />
					<property name="modelClass" value="com.tropo.core.verb.Say" />
					<lookup-method name="createVerbHandler" bean="sayHandler" />
				</bean>
				<!-- Record -->
				<bean class="com.tropo.server.verb.AbstractVerbFactory">
					<property name="xmlProvider" ref="recordProvider" />
					<property name="modelClass" value="com.tropo.core.verb.Record" />
					<lookup-method name="createVerbHandler" bean="recordHandler" />
				</bean>
				<!-- Ask -->
				<bean class="com.tropo.server.verb.AbstractVerbFactory">
					<property name="xmlProvider" ref="askProvider" />
					<property name="modelClass" value="com.tropo.core.verb.Ask" />
					<lookup-method name="createVerbHandler" bean="askHandler" />
				</bean>
				<!-- Output -->
				<bean class="com.tropo.server.verb.AbstractVerbFactory">
					<property name="xmlProvider" ref="outputProvider" />
					<property name="modelClass" value="com.tropo.core.verb.Output" />
					<lookup-method name="createVerbHandler" bean="outputHandler" />
				</bean>
				<!-- Input -->
				<bean class="com.tropo.server.verb.AbstractVerbFactory">
					<property name="xmlProvider" ref="inputProvider" />
					<property name="modelClass" value="com.tropo.core.verb.Input" />
					<lookup-method name="createVerbHandler" bean="inputHandler" />
				</bean>
			</list>
		</property>
	</bean>

	<!-- Storage Service implementations -->
	<bean id="storageServices"
	      class="org.springframework.beans.factory.serviceloader.ServiceListFactoryBean"
	      p:serviceType="com.tropo.core.recording.StorageService"/>
      
	<!-- Verb Handlers -->	
	<bean id="sayHandler" class="com.tropo.server.verb.SayHandler" scope="prototype" />
	<bean id="askHandler" class="com.tropo.server.verb.AskHandler" scope="prototype" />
	<bean id="transferHandler" class="com.tropo.server.verb.TransferHandler" scope="prototype" />
	<bean id="conferenceHandler" class="com.tropo.server.verb.ConferenceHandler" scope="prototype">
		<property name="mohoConferenceController" ref="conferenceController" />
		<property name="mixerActoryFactory" ref="mixerActorFactory"/>
	</bean>
	<bean id="outputHandler" class="com.tropo.server.verb.OutputHandler" scope="prototype" />
	<bean id="inputHandler" class="com.tropo.server.verb.InputHandler" scope="prototype" />
	<bean id="joinHandler" class="com.tropo.server.verb.JoinHandler" scope="prototype">
		<property name="callRegistry" ref="callRegistry"/>
	</bean>
	<bean id="recordHandler" class="com.tropo.server.verb.RecordHandler" scope="prototype">
		<property name="storageServices" ref="storageServices"/>
	</bean>

	<!-- Admin Service -->
	<bean id="adminService" class="com.tropo.server.AdminService"/>
	
	<!-- JMX Configuration -->
  	<bean id="exporter" class="org.springframework.jmx.export.MBeanExporter">
    	<property name="autodetect" value="true"/>
		<property name="namingStrategy" ref="namingStrategy"/>
    	<property name="assembler" ref="assembler"/>
  	</bean>

  	<bean id="callsBean" class="com.tropo.server.jmx.Calls">
  		<property name="callRegistry" ref="callRegistry" />
  		<property name="callStatistics" ref="callStatistics" />
  		<property name="cdrManager" ref="cdrManager" />
  	</bean>
  	
  	<bean id="cdrsBean" class="com.tropo.server.jmx.Cdrs">
  		<property name="cdrManager" ref="cdrManager" />
  	</bean>

  	<bean id="infoBean" class="com.tropo.server.jmx.Info">
  		<property name="adminService" ref="adminService" />
  	</bean>
  	
  	<bean id="adminBean" class="com.tropo.server.jmx.Admin">
  		<property name="adminService" ref="adminService" />
  	</bean>
  	
	<bean id="attributeSource" class="org.springframework.jmx.export.annotation.AnnotationJmxAttributeSource"/>
	
  	<bean id="assembler" class="org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler">
    	<property name="attributeSource" ref="attributeSource"/>
  	</bean> 
  	
	<bean id="namingStrategy" class="org.springframework.jmx.export.naming.MetadataNamingStrategy">
		<property name="attributeSource" ref="attributeSource"/>
	</bean>  	
	
  	<!-- CDR Handling -->
  	<bean id="fileCdrStorageStrategy" class="com.tropo.server.cdr.FileCdrStorageStrategy" 
  		  init-method="init"
  		  destroy-method="shutdown">
  		<property name="path" value="/tmp/test.log"/>
  	</bean>
  	
  	<!--  Uncomment to enable the JMS CDR Storage
	
  	<util:map id="env" map-class="java.util.HashMap" key-type="java.lang.String" value-type="java.lang.String">
		<entry>
			<key><util:constant static-field="javax.naming.Context.INITIAL_CONTEXT_FACTORY"/></key>
			<value>org.apache.activemq.jndi.ActiveMQInitialContextFactory</value>
		</entry>
		<entry>
			<key><util:constant static-field="javax.naming.Context.PROVIDER_URL"/></key>
			<value>tcp://localhost:61616</value>
		</entry>
	</util:map>
  	
  	<bean id="jmsCdrStorageStrategy" class="com.tropo.server.cdr.JMSCdrStorageStrategy" 
  		  init-method="init"
  		  destroy-method="shutdown">
		<property name="environment" ref="env"/>
		<property name="connectionFactory" value="QueueConnectionFactory"/>
		<property name="queue" value="example.A"/>
  	</bean>  	
  	-->
  	
  	<!-- Uncomment to enable the Xmpp PubSub based CDR Storage
  	
  	<bean id="xmppCdrStorageStrategy" class="com.tropo.server.cdr.XmppCdrStorageStrategy"
  		  init-method="init"
  		  destroy-method="shutdown">
  		  <property name="server" value="localhost"/>
  		  <property name="port" value="6222"/>
  		  <property name="username" value="admin"/>
  		  <property name="password" value="admin"/>
  		  <property name="node" value="tropo-cdr"/>
  	</bean>
  	-->
  	
  	<!-- Uncomment to enable AMQP based CDR storage 
  	<bean id="amqpCdrStorageStrategy" class="com.tropo.server.cdr.AmqpCdrStorageStrategy"
  		  init-method="init"
  		  destroy-method="shutdown">
  		  <property name="server" value="localhost"/>
  		  <property name="port" value="5672"/>
  		  <property name="username" value="guest"/>
  		  <property name="password" value="guest"/>
  		  <property name="exchange" value="tropo-exchange"/>
  		  <property name="route" value="tropo-route"/>
  	</bean>
  	-->
  	
  	<bean id="cdrErrorHandler" class="com.tropo.server.cdr.DefaultErrorHandler"/>
  	<bean id="cdrManager" class="com.tropo.server.CdrManager">
  		<property name="errorHandler" ref="cdrErrorHandler"/>
  		<property name="storageStrategies">
  			<list>
  				<ref bean="fileCdrStorageStrategy"/>
  				<!-- <ref bean="jmsCdrStorageStrategy"/> -->
  				<!-- <ref bean="xmppCdrStorageStrategy"/>  -->
  				<!-- <ref bean="amqpCdrStorageStrategy"/> -->
  			</list>
  		</property>
  	</bean> 
</beans>